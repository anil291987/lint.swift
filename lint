#!/bin/bash

if [ -z ${SRCROOT} ]
then
    SRCROOT="."
fi

path="lint.swift"

files=$(find "${SRCROOT}" \( -name "*.swift" \) \
        ! -path "${SRCROOT}/Carthage/*" \
        ! -path "${SRCROOT}/Pods/*")

rules=$(find "${SRCROOT}"/"$path"/rules \( -name "*.awk" \))

cache_file="${SRCROOT}/$path/issues.cache"
cache=$(cat $cache_file)


> $cache_file


function fileCache {
    awk -v file_name=$1 'BEGIN { RS="" } { if ( $1 == file_name) { print $0 } }'
}

function writeOut {
    echo -e "$1" >> $2
    echo -e "$1"
}


for file in $files
do
    file_change=$(stat -f "%Sm" -t "%Y-%m-%dT%H:%M:%S%z" "$file")
    cached_change=$(echo -e "$cache" | fileCache $file | awk '(NR == 2)')

    echo $file >> $cache_file
    echo $file_change >> $cache_file

    if [[ $file_change > $cached_change ]]
    then
        #trailing_newline rule is a bash script feel free to pull request an awk solution... :)
        if [ "`tail -c 1 $file`" != "" ]
        then
            out=$("$file:$(cat $file | wc -l | awk '{ print $1 }'): warning: No newline at the end of the file.")
            output
            echo -e "$out" >> $cache_file
            echo -e "$out"
        fi

        for rule in $rules
        do
            out=$(awk -f "$rule" "$file")
            if [[ !  -z  $out  ]]
            then
                echo -e "$out" >> $cache_file
                echo -e "$out"
            fi
        done
    else
        out=$(echo -e "$cache" | fileCache $file | awk '(NR > 2)')
        echo -e "$out" >> $cache_file
        echo -e "$out"
    fi

    echo -e "" >> $cache_file

done
